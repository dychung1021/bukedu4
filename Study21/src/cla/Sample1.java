package cla;

public class Sample1 {
	public static void main(String[] args){
		
		Car c=new Car(1245);
		c.run(5);
	}

}
//Object Oriented : 객체지향
class Car{
	//클래스는 필드, 생성자, 메서드를 가질 수 있다.
	//java는 {}를 벗어나면 메모리를 청소함으로써 타 언어에 있는 소멸자가 필요없다.
	//필드는 객체가 데이터를 저장하는 공간, 통상적으로 변수로 만들어지고, 속성을 저장
	//속성은 객체와 객체를 구별하는 것.
	int number;
	//메서드는 객체가 수행할 수 있는 동작, 호출이 이루어 질 때 수행됨.
		//리턴타입 : 동작수행시 반환하는 값, void는 없고 나머지는 return 뒤에 특정해주어야 함
		//매개변수 : 동작을 시킬 때 줘야 하는 값을 담을 변수, 매개변수의 타입과 일치하는 값을 주어야 동작
	void run(int a) {
		System.out.println(number+"번 차량이 주행합니다.");
	}
	//생성자 : 객체를 조립하는 동작, 메서드, 필드는 객체가 먼저 존재해야 존재, but 생성자는 객체보다 먼저 실행되어 객체를 생성
			//반드시 단 한번만 객체가 조립될 때 수행된다.
			//메서드, 필드는 객체.메서드명, 객체.필드여야 하지만 생성자는 클래스와 동일한 이름
			//리턴타입이 적혀있지 않고 이름이 클래스와 똑같은 메서드처럼 생겼다.
			//생성자가 먼저 객체를 만들면서 생성자를 수행하고 객체 만들고 객체가 객체 내부의 다른 클래스 명령수행
			//생성자를 지정하지 않아도 컴파일 할 때 내용이 없이 객체만을 생성하는 생성자 자동으로 생김
			
	
	Car(int a){
		//필드의 내용을 변경하는 등 툭정한 동작을 하기 위해서는 한번 적어줄 필요가 있다.
		number=a;
	}//생성자 overload
	//생성자는 이름을 바꿀 수 없으므로 overload처리, overload는 변수타입을 바꾸거나 변수의 위치를 바꿈으로써 수행
}
